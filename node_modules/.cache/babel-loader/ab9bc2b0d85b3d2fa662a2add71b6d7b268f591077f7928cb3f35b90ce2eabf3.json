{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n  setIsLoading(true);\n  setError(\"\");\n  try {\n    const currentSite = window.location.hostname;\n\n    // Check if we're running locally\n    const isLocal = window.location.hostname === \"localhost\";\n    if (isLocal) {\n      // Mock response for local development\n      console.log(\"ðŸ§ª LOCAL DEV MODE - Mocking Stripe session\");\n      const mockSessionId = \"cs_test_mock_\" + Date.now();\n      console.log(\"Mock Session ID:\", mockSessionId);\n\n      // For local testing, just show success message\n      alert(`Local Dev: Mock session created!\\nSession ID: ${mockSessionId}\\n\\nDeploy to Netlify to test real Stripe checkout.`);\n      onClose();\n      return;\n    }\n\n    // Real API call for deployed site\n    const response = await fetch(\"/.netlify/functions/create-ticket-session\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: formData.name,\n        email: formData.email,\n        site: currentSite\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Failed to create checkout session\");\n    }\n    console.log(\"Session created:\", data.sessionId);\n\n    // Redirect to Stripe Checkout\n    const stripe = window.Stripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);\n    const {\n      error: stripeError\n    } = await stripe.redirectToCheckout({\n      sessionId: data.sessionId\n    });\n    if (stripeError) {\n      throw new Error(stripeError.message);\n    }\n  } catch (err) {\n    setError(err.message);\n    console.error(\"Error creating checkout session:\", err);\n  } finally {\n    setIsLoading(false);\n  }\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","setIsLoading","setError","currentSite","window","location","hostname","isLocal","console","log","mockSessionId","Date","now","alert","onClose","response","fetch","method","headers","body","JSON","stringify","name","formData","email","site","data","json","ok","Error","error","sessionId","stripe","Stripe","process","env","REACT_APP_STRIPE_PUBLISHABLE_KEY","stripeError","redirectToCheckout","message","err"],"sources":["C:/Users/ABISHEK/OneDrive/Developer/raffle/module-raffle/src/components/RaffleModal.js"],"sourcesContent":["const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  setIsLoading(true);\r\n  setError(\"\");\r\n\r\n  try {\r\n    const currentSite = window.location.hostname;\r\n\r\n    // Check if we're running locally\r\n    const isLocal = window.location.hostname === \"localhost\";\r\n\r\n    if (isLocal) {\r\n      // Mock response for local development\r\n      console.log(\"ðŸ§ª LOCAL DEV MODE - Mocking Stripe session\");\r\n      const mockSessionId = \"cs_test_mock_\" + Date.now();\r\n      console.log(\"Mock Session ID:\", mockSessionId);\r\n\r\n      // For local testing, just show success message\r\n      alert(\r\n        `Local Dev: Mock session created!\\nSession ID: ${mockSessionId}\\n\\nDeploy to Netlify to test real Stripe checkout.`\r\n      );\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    // Real API call for deployed site\r\n    const response = await fetch(\"/.netlify/functions/create-ticket-session\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: formData.name,\r\n        email: formData.email,\r\n        site: currentSite,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || \"Failed to create checkout session\");\r\n    }\r\n\r\n    console.log(\"Session created:\", data.sessionId);\r\n\r\n    // Redirect to Stripe Checkout\r\n    const stripe = window.Stripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);\r\n    const { error: stripeError } = await stripe.redirectToCheckout({\r\n      sessionId: data.sessionId,\r\n    });\r\n\r\n    if (stripeError) {\r\n      throw new Error(stripeError.message);\r\n    }\r\n  } catch (err) {\r\n    setError(err.message);\r\n    console.error(\"Error creating checkout session:\", err);\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClBC,YAAY,CAAC,IAAI,CAAC;EAClBC,QAAQ,CAAC,EAAE,CAAC;EAEZ,IAAI;IACF,MAAMC,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;;IAE5C;IACA,MAAMC,OAAO,GAAGH,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW;IAExD,IAAIC,OAAO,EAAE;MACX;MACAC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzD,MAAMC,aAAa,GAAG,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAClDJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,aAAa,CAAC;;MAE9C;MACAG,KAAK,CACH,iDAAiDH,aAAa,qDAChE,CAAC;MACDI,OAAO,CAAC,CAAC;MACT;IACF;;IAEA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;MACxEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEC,QAAQ,CAACD,IAAI;QACnBE,KAAK,EAAED,QAAQ,CAACC,KAAK;QACrBC,IAAI,EAAEtB;MACR,CAAC;IACH,CAAC,CAAC;IAEF,MAAMuB,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAElC,IAAI,CAACZ,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,mCAAmC,CAAC;IACpE;IAEAtB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiB,IAAI,CAACK,SAAS,CAAC;;IAE/C;IACA,MAAMC,MAAM,GAAG5B,MAAM,CAAC6B,MAAM,CAACC,OAAO,CAACC,GAAG,CAACC,gCAAgC,CAAC;IAC1E,MAAM;MAAEN,KAAK,EAAEO;IAAY,CAAC,GAAG,MAAML,MAAM,CAACM,kBAAkB,CAAC;MAC7DP,SAAS,EAAEL,IAAI,CAACK;IAClB,CAAC,CAAC;IAEF,IAAIM,WAAW,EAAE;MACf,MAAM,IAAIR,KAAK,CAACQ,WAAW,CAACE,OAAO,CAAC;IACtC;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZtC,QAAQ,CAACsC,GAAG,CAACD,OAAO,CAAC;IACrB/B,OAAO,CAACsB,KAAK,CAAC,kCAAkC,EAAEU,GAAG,CAAC;EACxD,CAAC,SAAS;IACRvC,YAAY,CAAC,KAAK,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}